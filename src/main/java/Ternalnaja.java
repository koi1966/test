public class Ternalnaja<d> {

    public static void main(String[] args) {
        // тернарная операция ?:
        double a, b;
        double max; // максимум

// ввод значений a, b
// ...
        a = 3;
        b = 4;

// поиск максимума между двумя числами
        max = a > b ? a : b;
//        Пример 2. Использование тернарной операции ?: для поиска максимального значения между тремя числами a, b, c.
        // тернарная операция ?:
        double a1, b1, c;
        double max1; // максимум
        a = 3;
        b = 4;
        c = 5;
// ввод значений a, b, c
// ...

// поиск максимума между тремя числами
        max = a > b ? a : b;
        max = max > c ? max : c;
    }
//    Ниже демонстрируется результат после выполнения операции присваивания
//Пример. Пусть задан класс A, в котором определены одна внутренняя переменная a и конструктор класса

    class A {
        int a;

        // конструктор класса
        A() {
            a = 10;
        }
    }
//    Ниже демонстрируется результат после выполнения операции присваивания

    // объявление и выделение памяти для объектов класса A
    A obj1 = new A();
    A obj2 = new A();
    int d;

// проверка работы конструктора
//    d = obj1.a; // d = 10
//    d = obj2.a; // d = 10
//
//// установление новых, различных значений
//    obj1.a = 30;
//    obj2.a = 28;
//
//// до выполнения присваивания
//    d = obj1.a; // d = 30
//    d = obj2.a; // d = 28
//
//// присваивание объектов
//    obj2 = obj1;
//
//// после присваивания obj1 и obj2 ссылаются на общий участок памяти (obj1)
//    d = obj1.a; // d = 30
//    d = obj2.a; // d = 30
//
//// изменение значения в одном из объектов
//    obj2.a = 77;
//
//// доступ по другой ссылке (obj2) - одно и то же значение
//    d = obj1.a; // d = 77
//    Как видно из вышеприведенного кода, после присваивания объектов, эти объекты ссылаются на один и тот же участок памяти. В данном случае, это участок памяти выделенный для объекта obj1. Участок памяти, который был выделен для объекта obj2 после операции присваивания теряется бесповоротно. Позже этот участок будет очищен «сборщиком мусора».

//    5. Таблица приоритетов операций
//    Приоритет операций в порядке убывания
//--------------------------------------------------------------
//        ++ -- // (постфиксные)
//            ++ -- (префиксные) ~ ! +(унарный) -(унарный) (приведение типов)
//            *   /   %
//            +   -
//            >>  >>>  <<
//            >   >=   <    <=    instanceof
//            ==  !=
//            &
//            ^
//            |
//            &&
//            ||
//            ?:
//            ->
//            =  +=  -=  *=  /=  %=  >>=  <<=  >>>=
}
