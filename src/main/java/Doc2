Вопросы/примеры на собеседовании
https://proglib.io/p/15-questions-for-programmers

Основные принципы ООП: абстракция, инкапсуляция, наследование, полиморфизм.

Абстрагирование - это отделение существенного от несущественного.
От Абстрактного метода нельзя создавать создовать обекты - только наследоваться.
Абстракция —  означает выделение значимой информации и исключение из рассмотрения незначимой. С точки зрения
программирования это правильное разделение программы на объекты. Абстракция позволяет отобрать главные характеристики
и опустить второстепенные.

Пример: описание должностей в компании. Здесь название должности значимая информация, а описание обязанностей у каждой
должности это второстепенная информация. К примеру главной характеристикой для «директор» будет то, что это должность
чем-то управляет, а чем именно (директор по персоналу, финансовый директор, исполнительный директор) это уже
второстепенная информация.

Инкапсуляция — (гетеры / сетеры ) - скрытое работы внутренних действий.. от внешнего..

свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе.
Для Java корректно будет говорить, что инкапсуляция это «сокрытие реализации». Пример из жизни — пульт от телевизора.
Мы нажимаем кнопочку «увеличить громкость» и она увеличивается, но в этот момент происходят десятки процессов, которые
скрыты от нас.
Для Java: можно создать класс с 10 методами,
например вычисляющие площадь сложной фигуры, но сделать из них 9 private. 10й метод будет называться
«вычислитьПлощадь()» и объявлен public, а в нем уже будут вызываться необходимые скрытые от пользователя методы.
Именно его и будет вызывать пользователь.

Наследование — свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью
заимствующейся функциональностью. Класс, от которого производится наследование, называется базовым, родительским или
суперклассом. Новый класс — потомком, наследником, дочерним или производным классом.

Полиморфизм — способность метода обрабатывать танные разних типов.
свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней
структуре объекта.
Пример (чуть переделанный) из Thinking in Java:

public interface Shape {
    void draw();
    void erase();
}
public class Circle implements Shape {
    public void draw() {
        System.out.println("Circle.draw()");
    }
}
public class Triangle implements Shape {
    public void draw() {
        System.out.println("Triangle.draw()");
    }
}

public class TestPol {

    public static void main(String[] args) {
        Shape shape1 = new Circle();
        Shape shape2 = new Triangle();
        testPoly(shape1);
        testPoly(shape2);
    }

    public static void testPoly(Shape shape) {
        shape.draw();
    }
}
//Вывод в консоль:
//Circle.draw()
//Triangle.draw()

Есть общий интерфейс «Фигура» и две его реализации «Треугольник» и «Круг». У каждого есть метод «нарисовать».
Благодаря полиморфизму нам нет нужды писать отдельный метод для каждой из множества фигур, чтобы вызвать метод
«нарисовать».  Вызов полиморфного метода позволяет одному типу выразить свое отличие от другого, сходного типа,
хотя они и происходят от одного базового типа. Это отличие выражается различным действием методов, вызываемых
через базовый класс (или интерфейс).
Здесь приведен пример полиморфизма (также называемый динамическим связыванием, или поздним связыванием, или
связыванием во время выполнения), в котором продемонстрировано как во время выполнения программы будет выполнен
тот метод, который принадлежит передаваемому объекту.