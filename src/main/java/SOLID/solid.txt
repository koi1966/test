                    Принціп SOLID
S-  single responsibility principle, У класса должна быть только одна причина для изменения.
    «Модуль должен отвечать за одного и только за одного актора.»

O- open-closed principle - программные сущности … должны быть открыты для расширения, но закрыты для модификации
    Принцип открытости/закрытости означает, что программные сущности должны быть:

        открыты для расширения: означает, что поведение сущности может быть расширено путём создания новых типов сущностей.
        закрыты для изменения: в результате расширения поведения сущности, не должны вноситься изменения в код, который эту
        сущность использует.

L- Liskov substitution - Liskov principle - при наследовании не должны изменять поведение родителя (parent)
    функции, которые используют базовый тип, должны иметь возможность использовать подтипы базового типа
    не зная об этом

I-interface segregation principle - Принцип разделения интерфейса
    «много интерфейсов, специально предназначенных для клиентов, лучше, чем один интерфейс общего назначения»
    Программные сущности не должны зависеть от методов, которые они не используют.
    Принцип разделения интерфейсов говорит о том, что слишком «толстые» интерфейсы необходимо разделять на более
    маленькие и специфические, чтобы программные сущности маленьких интерфейсов знали только о методах, которые
    необходимы им в работе. В итоге, при изменении метода интерфейса не должны меняться программные сущности,
    которые этот метод не используют.

D-dependency inversion principle - Принцип инверсии зависимостей
    «Зависимость на Абстракциях. Нет зависимости на что-то конкретное»

    При создании программных систем использование принципов SOLID способствует созданию такой системы, которую будет
    легко поддерживать и расширять в течение долгого времени